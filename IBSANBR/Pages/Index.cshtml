@page
@using Newtonsoft.Json
@model IndexModel
<partial name="_Header" />
<div style="background-color:#f2f2f2;min-height:100%; margin: 16px 0 0 0;">
    <div class="ui stackable grid container">
        <div class="row">
            <div class="column">
                <h2>Pesquisa</h2>
                <form method="post" class="ui form tiny principal-form">
                    <div class="fields">
                        <div class="four wide field">
                            <select asp-for="CodigoMunicipio" class="ui search selection dropdown">
                                <option value="">Selecione</option>
                                @foreach (var m in Model.Municipios)
                                {
                                    <option value="@m.CodigoMunicipio">@m.Nome-@m.UF</option>
                                }
                            </select>
                        </div>
                        <div class="two wide field">
                            <input type="submit" class="ui tiny button" value="Pesquisar" />
                        </div>
                    </div>
                    <div class="ui error message"></div>

                </form>
            </div>
        </div>
        <div class="ui two column row">
            @if (Model.PopulacaoCobertura != null)
            {
                <div class="ui column">
                    <div id="chartOneContainer" class="ui blue segment"></div>
                </div>
            }
            @if (Model.ReceitaCustoOperacao != null)
            {
                <div class="ui column">
                    <div id="chartTwoContainer" class="ui blue segment"></div>
                </div>

            }
        </div>
        <div class="ui two column row">
            @if (Model.Custos != null)
            {
                <div class="ui column">
                    <div id="chartThreeContainer" class="ui blue segment"></div>
                </div>

            }
            <div class="ui column">

            </div>
        </div>
    </div>
</div>
@section scripts {
    <script>
        $('.ui.form').form({
            fields: {
                CodigoMunicipio: { identifier: 'CodigoMunicipio', rules: [{ type: 'empty', prompt: 'O campo Município é obrigatório' }] },
            }
        });
    </script>
    <script>

        var result_c1 = @Html.Raw(@JsonConvert.SerializeObject(Model.PopulacaoCobertura))

        var cats = [];
        var populacao = [];
        var atendimentoTotal = [];
        var atendimentoEsgoto = [];

        populacao.name = 'População'
        populacao.data = []

        atendimentoTotal.name = 'Atendimento Total'
        atendimentoTotal.data = []
        atendimentoTotal.yAxis = 1,

        atendimentoEsgoto.name = 'Atendimento Esgoto'
        atendimentoEsgoto.data = []
        atendimentoEsgoto.yAxis = 1,

        $(result_c1).each(function (index) {
            cats.push(result_c1[index].Competencia);

            populacao.data.push(result_c1[index].GE12A);

            atendimentoTotal.data.push(
               ((result_c1[index].AG001 / result_c1[index].GE12A) * 100)
            );
            atendimentoEsgoto.data.push(
                ((result_c1[index].ES001 / result_c1[index].GE12A) * 100)
            );
        });

    Highcharts.chart('chartOneContainer', {
        chart: {
            type: 'line'
        },
        title: {
            text: ''
        },
        subtitle: {
            text: ''
        },
        xAxis: {
            categories: cats
        },
        yAxis: [
            {
                title: { text: 'População na área de cobertura' }
            },
            {
                title: { text: 'Cobertura, %' },
                opposite: true,
                //max: 100
            }],
        tooltip: {
            formatter: function () {
                return '' +
                    this.x + ': ' + Highcharts.numberFormat(this.y, 2, ',', '.') +
                    (this.series.name.indexOf('%') > 0 ? '%' : '');
                //'Coverage with Water Service, %' ? '%' : '');
            }
        },
        plotOptions: {
            line: {
                dataLabels: {
                    enabled: false
                },
                enableMouseTracking: true
            }
        },
        series: [populacao, atendimentoTotal, atendimentoEsgoto]
    });

    </script>
    <script>

        var result_c2 = @Html.Raw(@JsonConvert.SerializeObject(Model.ReceitaCustoOperacao))

        var cats = [];
        var receitaTotal = [];
        var despesaTotal = [];
        var desempenho = [];


        desempenho.name = 'Desempenho';
        desempenho.data = [];
        desempenho.yAxis = 1;

        receitaTotal.name = 'Receita Total'
        receitaTotal.data = []
        receitaTotal.type = 'column';

        despesaTotal.name = 'Despesa Total'
        despesaTotal.data = []
        despesaTotal.type = 'column';

        $(result_c2).each(function (index) {
            cats.push(result_c2[index].Competencia);

            receitaTotal.data.push(result_c2[index].FN001);
            despesaTotal.data.push(result_c2[index].FN017);
            desempenho.data.push(
                ((result_c2[index].FN001 / result_c2[index].FN017) * 100)
            );
        });

        Highcharts.chart('chartTwoContainer', {

            chart: {
                defaultSeriesType: 'line'
            },
            title: {
                text: ''
            },
            subtitle: {
                text: ''
            },
            xAxis: {
                categories: cats
            },
            yAxis: [{
                title: {
                    text: 'Receita e Custos, R$',
                }
            }, {
                title: {
                    text: 'Operações',
                    style: {
                        color: '#4572A7'
                    }
                },
                labels: {
                    formatter: function () {
                        return Highcharts.numberFormat(this.value) + '';
                    },
                    style: {
                        color: '#4572A7'
                    }
                },
                opposite: true
                }],
            tooltip: {
                formatter: function () {
                    return '' + this.x + ': ' + (this.series.name == 'Desempenho' ? '' : 'R$ ') + Highcharts.numberFormat(this.y);
                }
            },
            plotOptions: {
                line: {
                    dataLabels: {
                        enabled: false
                    },
                    enableMouseTracking: true
                }
            },
            series: [receitaTotal, despesaTotal, desempenho]
        });


    </script>

    <script>

        var result_c3 = @Html.Raw(@JsonConvert.SerializeObject(Model.Custos))

            Highcharts.chart('chartThreeContainer',
            {
            chart: {
                margin: [0, 0, 40, 0],
                spacing: [0, 0, 20, 0]
            },
            title: {
                text: ''//'Consumption Break-Down, 2016'
            },
            tooltip: {
                formatter: function () {
                    return '<b>' + this.point.name + '</b><br/> ' + Math.round(this.percentage) + ' %';
                }
            },
            plotOptions: {
                pie: {
                    allowPointSelect: true,
                    size: '75%',
                    cursor: 'pointer',
                    showInLegend: true,
                    dataLabels: {
                        enabled: true,
                        formatter: function () {
                            return Math.round(this.percentage) + ' %';
                        }
                    }
                }
            },
            series: [{
                type: 'pie',
                name: 'Custos',
                data: [
                    {
                        name: 'Pessoal Próprio',
                        y: parseFloat(result_c3.FN010),
                        sliced: true,
                        selected: true
                    },
                    {
                        name: 'Produtos Químicos',
                        y: parseFloat(result_c3.FN011),
                        sliced: true,
                        selected: true
                    },
                    {
                        name: 'Energia elétrica',
                        y: parseFloat(result_c3.FN013),
                        sliced: true,
                        selected: true

                    },
                    {
                        name: 'Serviços de Terceiros',
                        y: parseFloat(result_c3.FN014),
                        sliced: true,
                        selected: true

                    },
                    {
                        name: 'Fiscais ou Tributárias',
                        y: parseFloat(result_c3.FN021),
                        sliced: true,
                        selected: true

                    },
                    {
                        name: 'Outras',
                        y: parseFloat(result_c3.OUTRAS),
                        sliced: true,
                        selected: true

                    }
                ]
            }]
        });
    </script>
}
